name: js-blog-build-test

on:
  workflow_call:
    secrets:
      DOCKERHUB_USER_NAME:
        required: true
      DOCKERHUB_USER_PASSWORD:
        required: true
    inputs:
      PIPELINE_REF:
        description: 'public-pipeline-makingのどのブランチをfetchするか'
        default: main
        required: true
        type: string
      INTEGRATION_TEST:
        description: 'Seleniumによる統合テスト実行フラグ'
        default: true
        required: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # TODO ジョブコンテナーを取りやめて、松本さん案のyqとsetup-nodeを使用する方法で高速化できるか確認する
      image: docker.io/daichiwealsoft/integration_test_job_base_image:v1.0.1
      credentials:
        username: ${{ secrets.DOCKERHUB_USER_NAME }}
        password: ${{ secrets.DOCKERHUB_USER_PASSWORD }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      env:
        NODE_ENV: development
      options: --cpus 2
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          repository: 'wealsoft/public-pipeline-making'
          path: './public-pipeline-making'
          ref: ${{ inputs.PIPELINE_REF }}

      - name: SetEnv
        env:
          PR_BRANCH_NAME: ${{ github.head_ref }}
        shell: bash
        run: |
          echo build_tag=${PR_BRANCH_NAME#*/} >> $GITHUB_ENV

      - name: SetConfigEnv
        shell: bash
        run: |
          CONFIG_COMMON_LIST=$(yq eval '.common' ./.github/config.yml | sed 's/\:\ /\=/')
          for config_common in $CONFIG_COMMON_LIST
          do
            echo "$config_common" >> $GITHUB_ENV
          done

      - name: Cache
        uses: actions/cache@v3.0.11
        with:
          path: "**/node_modules"
          key: node-modules-${{ github.sha }}
          restore-keys: node-modules-

      - name: App Src Build
        shell: bash
        run: |
            . ${{ github.workspace }}/${{ env.SHELL_FILE_PATH }}

  # TODObuildxを使用して差分ビルド・さらにcacheアクションを使用して高速化する
  # buildジョブと並列で動作させる
  setup_integration_test:
    runs-on: ubuntu-latest
    if: ${{ inputs.INTEGRATION_TEST }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          repository: 'wealsoft/public-pipeline-making'
          path: './public-pipeline-making'
          ref: ${{ inputs.PIPELINE_REF }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_USER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Image Cache
        uses: actions/cache@v3.0.11
        with:
          path: "**/.buildx-cache"
          key: docker-job-container-images-${{ hashFiles('**/.buildx-cache/*') }}
          restore-keys: docker-job-container-images-

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/public-pipeline-making/.github
          file: ${{ github.workspace }}/public-pipeline-making/.github/Dockerfile_js_job_container
          push: true
          tags: docker.io/daichiwealsoft/integration_test_job_base_image:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # dockerhub経由でコンテナーイメージを渡すようにする
  # 静的資材はartifact経由で受け渡す
  integration_test:
    runs-on: ubuntu-latest
    if: ${{ inputs.INTEGRATION_TEST }}
    needs: ['build','setup_integration_test']
    container:
      image: docker.io/daichiwealsoft/integration_test_job_base_image:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USER_NAME }}
        password: ${{ secrets.DOCKERHUB_USER_PASSWORD }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      env:
        NODE_ENV: development
      options: --cpus 2
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          repository: 'wealsoft/public-pipeline-making'
          path: './public-pipeline-making'
          ref: ${{ inputs.PIPELINE_REF }}

      - name: App Src Build
        shell: bash
        run: |
            . ${{ github.workspace }}/${{ env.SHELL_FILE_PATH }}